{
    "last_update_timestamp": 1648974311, 
    "packages": {
        "egeoffrey-collection-raspberrypi": {
            "info": {
                "created_timestamp": 1567707412, 
                "created_days_ago": 940, 
                "repository": "egeoffrey/egeoffrey-collection-raspberrypi", 
                "created_string": "05/09/2019 18:16:52", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1628664328, 
                        "updated_string": "11/08/2021 06:45:28", 
                        "updated_days_ago": 235
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-collection-raspberrypi", 
                        "description": "An All-In-One collection of the most common eGeoffrey packages running on Raspberry Pi", 
                        "package": "egeoffrey-collection-raspberrypi", 
                        "dockerhub": "egeoffrey/egeoffrey-collection-raspberrypi", 
                        "manifest_schema": 2, 
                        "tags": "collection raspberrypi", 
                        "modules": [
                            {
                                "interaction/microphone": {
                                    "description": "Capture voice commands and respond accordingly", 
                                    "module_configuration": [
                                        {
                                            "format": "google|pocketsphinx", 
                                            "required": true, 
                                            "description": "The speech-to-text engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "speaker", 
                                            "description": "The name of the eGeoffrey notification service the speaker is running on", 
                                            "name": "speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the microphone is attached to", 
                                            "name": "device"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_raspi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_orangepi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_call": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_sms": {
                                    "description": "Send a sms through an attached serial device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/speaker": {
                                    "description": "Play a notification out loud through an attached speaker", 
                                    "module_configuration": [
                                        {
                                            "format": "google|picotts", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The text-to-speach engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the speaker is attached to", 
                                            "name": "device"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Weather the speaker has to be connected through bluetooth", 
                                            "name": "bluetooth_speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "F5:B6:AB:45:63:C6", 
                                            "description": "The MAC address of the bluetooth speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": 100, 
                                            "description": "The volume to set to the speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/chromecast": {
                                    "description": "Play a notification through a Chromecast device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.53", 
                                            "description": "The hostname/IP address of the Chromecast device", 
                                            "name": "device_ip"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.254", 
                                            "description": "The IP address where this module runs (the device will connect back here to play the audio)", 
                                            "name": "local_ip"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "service/ads1x15": {
                                    "description": "retrieve values from a ads1x15 analog to digital converter", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "Channel to use", 
                                                "name": "channel"
                                            }, 
                                            {
                                                "format": "ads1115|ads1015", 
                                                "required": true, 
                                                "description": "Converter type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "The address to use", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "2/3|1|2|4|8|16", 
                                                "required": true, 
                                                "description": "Converter gain", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "volt|raw|integer|percentage", 
                                                "required": true, 
                                                "description": "What to output", 
                                                "name": "output"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "retrieve values from a bluetooth/BLE device", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "Handle address", 
                                                "name": "handle"
                                            }, 
                                            {
                                                "format": "value|notification", 
                                                "required": true, 
                                                "description": "Handle type", 
                                                "name": "handle_type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "00:11:22:33:44", 
                                                "description": "The MAC address of the device", 
                                                "name": "mac"
                                            }, 
                                            {
                                                "format": "number|string", 
                                                "required": false, 
                                                "description": "Format of the data to return", 
                                                "name": "format"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth_discover": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "discover bluetooth/BLE devices in range", 
                                    "service_configuration": {}
                                }
                            }, 
                            {
                                "service/dht": {
                                    "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|humidity", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "measure"
                                            }, 
                                            {
                                                "format": "dht11|dht22", 
                                                "required": true, 
                                                "description": "DHT Sensor Type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin the sensor is attached to", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/ds18b20": {
                                    "description": "Retrieve temperature from a ds18b20 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "28-0000067b9508", 
                                                "description": "The device identifier that can be found under /sys/bus/w1/devices", 
                                                "name": "device"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_raspi": {
                                    "description": "Read/write from a GPIO pin (raspberrypi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }, 
                                            {
                                                "format": "up|down", 
                                                "required": false, 
                                                "description": "Set pull up/pull down resistor", 
                                                "name": "pull_up_down"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_orangepi": {
                                    "description": "Read/write from a GPIO pin (orangepi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/messagebridge": {
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50140, 
                                            "description": "The udp port the Messagebridge is broadcasting data to", 
                                            "name": "port_listen"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50141, 
                                            "description": "The udp port the Messagebridge is listening", 
                                            "name": "port_send"
                                        }
                                    ], 
                                    "description": "Interact with Ciseco/WirelessThings devices", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TEMP", 
                                                "description": "The measure to take", 
                                                "name": "measure"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 5, 
                                                "description": "For devices with a Generic IO firmware put it to sleep for additional minutes", 
                                                "name": "cycle_sleep_min"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_serial": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/mysensors", 
                                            "description": "The serial port the MySensors gateway is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 9600, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors serial gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-out", 
                                            "description": "The topic prefix to subscribe to", 
                                            "name": "subscribe_topic_prefix"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-in", 
                                            "description": "The topic prefix to publish data into", 
                                            "name": "publish_topic_prefix"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors MQTT gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_ethernet": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.230", 
                                            "description": "The IP address or hostname running the MySensors gateway", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5003, 
                                            "description": "The port the gateway is listening to", 
                                            "name": "port"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors ethernet gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/rtl_433": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/usr/local/bin/rtl_433", 
                                            "description": "The command for running rtl_433 executable", 
                                            "name": "command"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "-F json -U", 
                                            "description": "The arguments for running the rtl_433 command", 
                                            "name": "arguments"
                                        }
                                    ], 
                                    "description": "Interact with an attached RTL-SDR device", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "model=Generic Sensor&id=3d c1 5c", 
                                                "description": "Filter in provided data in a key1=value1&key2=value2 format", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The key whose value has to be retrieved", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/system": {
                                    "description": "Collect telemetry information from the system", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "cpu_user|cpu_system|ram_used|swap_used|load_1|load_5|load_15|network_services|network_connections|temperature|uptime|logwatch|reboot|shutdown|system_logs", 
                                                "required": true, 
                                                "description": "The statistic to retrieve", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/zigbee2mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT broker hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "zigbee2mqtt", 
                                            "description": "Zigbee2mqtt base topic", 
                                            "name": "base_topic"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/image": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "description": "Clarifai API Key (https://portal.clarifai.com/signup) for object detection", 
                                            "name": "clarifai_api_key"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "If receiving images through MQTT, hostname to connect to", 
                                            "name": "mqtt_hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "mqtt_port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "mqtt_username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "mqtt_password"
                                        }
                                    ], 
                                    "description": "Retrieve images from a url or by running a command", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "topic/webcam1", 
                                                "description": "The MQTT topic to subscribe to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "http://domain.com/image.jpg", 
                                                "description": "Download the image from this URL", 
                                                "name": "url"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "username", 
                                                "description": "Username if the URL requires basic authentication", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": false, 
                                                "placeholder": "password", 
                                                "description": "Password if the URL requires basic authentication", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "raspistill -w 640 -h 480 -o -", 
                                                "description": "Run a command returning an image", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host", 
                            "ports": [
                                "8081:8081"
                            ], 
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ], 
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "development", 
                        "sdk_branch": "development", 
                        "icon": "microchip", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628665045, 
                        "updated_string": "11/08/2021 06:57:25", 
                        "updated_days_ago": 235
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-collection-raspberrypi", 
                        "description": "An All-In-One collection of the most common eGeoffrey packages running on Raspberry Pi", 
                        "package": "egeoffrey-collection-raspberrypi", 
                        "dockerhub": "egeoffrey/egeoffrey-collection-raspberrypi", 
                        "manifest_schema": 2, 
                        "tags": "collection raspberrypi", 
                        "modules": [
                            {
                                "interaction/microphone": {
                                    "description": "Capture voice commands and respond accordingly", 
                                    "module_configuration": [
                                        {
                                            "format": "google|pocketsphinx", 
                                            "required": true, 
                                            "description": "The speech-to-text engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "speaker", 
                                            "description": "The name of the eGeoffrey notification service the speaker is running on", 
                                            "name": "speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the microphone is attached to", 
                                            "name": "device"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_raspi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_orangepi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_call": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_sms": {
                                    "description": "Send a sms through an attached serial device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/speaker": {
                                    "description": "Play a notification out loud through an attached speaker", 
                                    "module_configuration": [
                                        {
                                            "format": "google|picotts", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The text-to-speach engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the speaker is attached to", 
                                            "name": "device"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Weather the speaker has to be connected through bluetooth", 
                                            "name": "bluetooth_speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "F5:B6:AB:45:63:C6", 
                                            "description": "The MAC address of the bluetooth speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": 100, 
                                            "description": "The volume to set to the speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "service/ads1x15": {
                                    "description": "retrieve values from a ads1x15 analog to digital converter", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "Channel to use", 
                                                "name": "channel"
                                            }, 
                                            {
                                                "format": "ads1115|ads1015", 
                                                "required": true, 
                                                "description": "Converter type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "The address to use", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "2/3|1|2|4|8|16", 
                                                "required": true, 
                                                "description": "Converter gain", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "volt|raw|integer|percentage", 
                                                "required": true, 
                                                "description": "What to output", 
                                                "name": "output"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "retrieve values from a bluetooth/BLE device", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "Handle address", 
                                                "name": "handle"
                                            }, 
                                            {
                                                "format": "value|notification", 
                                                "required": true, 
                                                "description": "Handle type", 
                                                "name": "handle_type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "00:11:22:33:44", 
                                                "description": "The MAC address of the device", 
                                                "name": "mac"
                                            }, 
                                            {
                                                "format": "number|string", 
                                                "required": false, 
                                                "description": "Format of the data to return", 
                                                "name": "format"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth_discover": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "discover bluetooth/BLE devices in range", 
                                    "service_configuration": {}
                                }
                            }, 
                            {
                                "service/dht": {
                                    "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|humidity", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "measure"
                                            }, 
                                            {
                                                "format": "dht11|dht22", 
                                                "required": true, 
                                                "description": "DHT Sensor Type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin the sensor is attached to", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/ds18b20": {
                                    "description": "Retrieve temperature from a ds18b20 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "28-0000067b9508", 
                                                "description": "The device identifier that can be found under /sys/bus/w1/devices", 
                                                "name": "device"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_raspi": {
                                    "description": "Read/write from a GPIO pin (raspberrypi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }, 
                                            {
                                                "format": "up|down", 
                                                "required": false, 
                                                "description": "Set pull up/pull down resistor", 
                                                "name": "pull_up_down"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_orangepi": {
                                    "description": "Read/write from a GPIO pin (orangepi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/messagebridge": {
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50140, 
                                            "description": "The udp port the Messagebridge is broadcasting data to", 
                                            "name": "port_listen"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50141, 
                                            "description": "The udp port the Messagebridge is listening", 
                                            "name": "port_send"
                                        }
                                    ], 
                                    "description": "Interact with Ciseco/WirelessThings devices", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TEMP", 
                                                "description": "The measure to take", 
                                                "name": "measure"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 5, 
                                                "description": "For devices with a Generic IO firmware put it to sleep for additional minutes", 
                                                "name": "cycle_sleep_min"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_serial": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/mysensors", 
                                            "description": "The serial port the MySensors gateway is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 9600, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors serial gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-out", 
                                            "description": "The topic prefix to subscribe to", 
                                            "name": "subscribe_topic_prefix"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-in", 
                                            "description": "The topic prefix to publish data into", 
                                            "name": "publish_topic_prefix"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors MQTT gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_ethernet": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.230", 
                                            "description": "The IP address or hostname running the MySensors gateway", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5003, 
                                            "description": "The port the gateway is listening to", 
                                            "name": "port"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors ethernet gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/rtl_433": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/usr/local/bin/rtl_433", 
                                            "description": "The command for running rtl_433 executable", 
                                            "name": "command"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "-F json -U", 
                                            "description": "The arguments for running the rtl_433 command", 
                                            "name": "arguments"
                                        }
                                    ], 
                                    "description": "Interact with an attached RTL-SDR device", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "model=Generic Sensor&id=3d c1 5c", 
                                                "description": "Filter in provided data in a key1=value1&key2=value2 format", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The key whose value has to be retrieved", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/system": {
                                    "description": "Collect telemetry information from the system", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "cpu_user|cpu_system|ram_used|swap_used|load_1|load_5|load_15|network_services|network_connections|temperature|uptime|logwatch|reboot|shutdown|system_logs", 
                                                "required": true, 
                                                "description": "The statistic to retrieve", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/zigbee2mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT broker hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "zigbee2mqtt", 
                                            "description": "Zigbee2mqtt base topic", 
                                            "name": "base_topic"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/image": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "description": "Clarifai API Key (https://portal.clarifai.com/signup) for object detection", 
                                            "name": "clarifai_api_key"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "If receiving images through MQTT, hostname to connect to", 
                                            "name": "mqtt_hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "mqtt_port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "mqtt_username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "mqtt_password"
                                        }
                                    ], 
                                    "description": "Retrieve images from a url or by running a command", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "topic/webcam1", 
                                                "description": "The MQTT topic to subscribe to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "http://domain.com/image.jpg", 
                                                "description": "Download the image from this URL", 
                                                "name": "url"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "username", 
                                                "description": "Username if the URL requires basic authentication", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": false, 
                                                "placeholder": "password", 
                                                "description": "Password if the URL requires basic authentication", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "raspistill -w 640 -h 480 -o -", 
                                                "description": "Run a command returning an image", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host", 
                            "privileged": true, 
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ]
                        }, 
                        "version": 1.2, 
                        "branch": "master", 
                        "icon": "microchip", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-gui": {
            "info": {
                "created_timestamp": 1565192784, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-gui", 
                "created_string": "07/08/2019 15:46:24", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1627632629, 
                        "updated_string": "30/07/2021 08:10:29", 
                        "updated_days_ago": 247
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-gui", 
                        "description": "Provides a web user interface for accessing all eGeoffrey's functionalities", 
                        "package": "egeoffrey-gui", 
                        "dockerhub": "egeoffrey/egeoffrey-gui", 
                        "manifest_schema": 2, 
                        "tags": "gui", 
                        "modules": [
                            {
                                "gui/webserver": {
                                    "description": "Runs the webserver serving eGeoffrey's web interface"
                                }
                            }
                        ], 
                        "container_config": {
                            "ports": [
                                "80:80"
                            ]
                        }, 
                        "version": 1.3, 
                        "branch": "development", 
                        "sdk_branch": "development", 
                        "icon": "columns", 
                        "revision": 20
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1648909689, 
                        "updated_string": "02/04/2022 14:28:09", 
                        "updated_days_ago": 0
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-gui", 
                        "description": "Provides a web user interface for accessing all eGeoffrey's functionalities", 
                        "package": "egeoffrey-gui", 
                        "dockerhub": "egeoffrey/egeoffrey-gui", 
                        "manifest_schema": 2, 
                        "tags": "gui", 
                        "modules": [
                            {
                                "gui/webserver": {
                                    "description": "Runs the webserver serving eGeoffrey's web interface"
                                }
                            }
                        ], 
                        "container_config": {
                            "ports": [
                                "80:80"
                            ]
                        }, 
                        "version": 1.4, 
                        "branch": "master", 
                        "icon": "columns", 
                        "revision": 3
                    }
                }, 
                "gh-pages": {
                    "info": {
                        "updated_timestamp": 1628521835, 
                        "updated_string": "09/08/2021 15:10:35", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {}
                }
            }
        }, 
        "egeoffrey-notification-telegram": {
            "info": {
                "created_timestamp": 1575240036, 
                "created_days_ago": 853, 
                "repository": "egeoffrey/egeoffrey-notification-telegram", 
                "created_string": "01/12/2019 22:40:36", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628579108, 
                        "updated_string": "10/08/2021 07:05:08", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-telegram", 
                        "description": "Send a notification through Telegram", 
                        "package": "egeoffrey-notification-telegram", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-telegram", 
                        "manifest_schema": 2, 
                        "tags": "notification telegram", 
                        "modules": [
                            {
                                "notification/telegram_messenger": {
                                    "description": "Send a notification via Telegram to a user or a group", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The chat_id you want to send the message to (https://t.me/gettingidbot)", 
                                            "name": "chat_id"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "hashtag", 
                        "revision": 2
                    }
                }
            }
        }, 
        "egeoffrey-service-gpio": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-gpio", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706793, 
                        "updated_string": "17/09/2019 07:53:13", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-gpio", 
                        "description": "Read/write from a GPIO pin", 
                        "package": "egeoffrey-service-gpio", 
                        "dockerhub": "egeoffrey/egeoffrey-service-gpio", 
                        "manifest_schema": 2, 
                        "tags": "service gpio raspberrypi orangepi", 
                        "modules": [
                            {
                                "service/gpio_raspi": {
                                    "description": "Read/write from a GPIO pin (raspberrypi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }, 
                                            {
                                                "format": "up|down", 
                                                "required": false, 
                                                "description": "Set pull up/pull down resistor", 
                                                "name": "pull_up_down"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_orangepi": {
                                    "description": "Read/write from a GPIO pin (orangepi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "microchip", 
                        "revision": 8
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523996, 
                        "updated_string": "09/08/2021 15:46:36", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-gpio", 
                        "description": "Read/write from a GPIO pin", 
                        "package": "egeoffrey-service-gpio", 
                        "dockerhub": "egeoffrey/egeoffrey-service-gpio", 
                        "manifest_schema": 2, 
                        "tags": "service gpio raspberrypi orangepi", 
                        "modules": [
                            {
                                "service/gpio_raspi": {
                                    "description": "Read/write from a GPIO pin (raspberrypi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }, 
                                            {
                                                "format": "up|down", 
                                                "required": false, 
                                                "description": "Set pull up/pull down resistor", 
                                                "name": "pull_up_down"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/gpio_orangepi": {
                                    "description": "Read/write from a GPIO pin (orangepi)", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }, 
                                            {
                                                "format": "rising|falling|both", 
                                                "required": true, 
                                                "description": "The triggering event", 
                                                "name": "edge_detect"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin of the GPIO to use (BCM)", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "microchip", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-image": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-image", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628579743, 
                        "updated_string": "10/08/2021 07:15:43", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-image", 
                        "description": "Retrieve images from a url or command, perform motion detection and object recognition", 
                        "package": "egeoffrey-service-image", 
                        "dockerhub": "egeoffrey/egeoffrey-service-image", 
                        "manifest_schema": 2, 
                        "tags": "service image webcam", 
                        "modules": [
                            {
                                "service/image": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "description": "Clarifai API Key (https://portal.clarifai.com/signup) for object detection", 
                                            "name": "clarifai_api_key"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "If receiving images through MQTT, hostname to connect to", 
                                            "name": "mqtt_hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "mqtt_port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "mqtt_username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "mqtt_password"
                                        }
                                    ], 
                                    "description": "Retrieve images from a url or by running a command", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "topic/webcam1", 
                                                "description": "The MQTT topic to subscribe to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "http://domain.com/image.jpg", 
                                                "description": "Download the image from this URL", 
                                                "name": "url"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "username", 
                                                "description": "Username if the URL requires basic authentication", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": false, 
                                                "placeholder": "password", 
                                                "description": "Password if the URL requires basic authentication", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "raspistill -w 640 -h 480 -o -", 
                                                "description": "Run a command returning an image", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 20, 
                                                "description": "Ignore the image unless a motion (higher than this %) is detected", 
                                                "name": "detect_motion_threshold"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Ignore the image unless at least this number of people are detected in the image", 
                                                "name": "detect_people_threshold"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "people", 
                                                "description": "Ignore the image unless this object is detected in the image", 
                                                "name": "detect_object_name"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 98, 
                                                "description": "Ignore the image unless the detected object has a confidence level higher than this percentage", 
                                                "name": "detect_object_threshold"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.2, 
                        "branch": "master", 
                        "icon": "image", 
                        "revision": 2
                    }
                }
            }
        }, 
        "egeoffrey-service-rss": {
            "info": {
                "created_timestamp": 1565192790, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-rss", 
                "created_string": "07/08/2019 15:46:30", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706797, 
                        "updated_string": "17/09/2019 07:53:17", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-rss", 
                        "description": "Parse a RSS feed", 
                        "package": "egeoffrey-service-rss", 
                        "dockerhub": "egeoffrey/egeoffrey-service-rss", 
                        "manifest_schema": 2, 
                        "tags": "service rss", 
                        "modules": [
                            {
                                "service/rss": {
                                    "description": "Parse a RSS feed", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "http://rss.cnn.com/rss/cnn_latest.rss", 
                                                "description": "The url of the RSS feed", 
                                                "name": "url"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "rss", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524565, 
                        "updated_string": "09/08/2021 15:56:05", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-rss", 
                        "description": "Parse a RSS feed", 
                        "package": "egeoffrey-service-rss", 
                        "dockerhub": "egeoffrey/egeoffrey-service-rss", 
                        "manifest_schema": 2, 
                        "tags": "service rss", 
                        "modules": [
                            {
                                "service/rss": {
                                    "description": "Parse a RSS feed", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "http://rss.cnn.com/rss/cnn_latest.rss", 
                                                "description": "The url of the RSS feed", 
                                                "name": "url"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "rss", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-chromecast": {
            "info": {
                "created_timestamp": 1569530930, 
                "created_days_ago": 919, 
                "repository": "egeoffrey/egeoffrey-notification-chromecast", 
                "created_string": "26/09/2019 20:48:50", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1628663354, 
                        "updated_string": "11/08/2021 06:29:14", 
                        "updated_days_ago": 235
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-chromecast", 
                        "description": "Play a notification out loud through a Chromecast device like Google Home Mini", 
                        "package": "egeoffrey-notification-chromecast", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-chromecast", 
                        "manifest_schema": 2, 
                        "tags": "notification speaker voice chromecast", 
                        "modules": [
                            {
                                "notification/chromecast": {
                                    "description": "Play a notification through a Chromecast device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.53", 
                                            "description": "The hostname/IP address of the Chromecast device", 
                                            "name": "device_ip"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.254", 
                                            "description": "The IP address where this module runs (the device will connect back here to play the audio)", 
                                            "name": "local_ip"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "ports": [
                                "8081:8081"
                            ]
                        }, 
                        "version": 1.1, 
                        "branch": "development", 
                        "icon": "volume-up", 
                        "revision": 3
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628663459, 
                        "updated_string": "11/08/2021 06:30:59", 
                        "updated_days_ago": 235
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-chromecast", 
                        "description": "Play a notification out loud through a Chromecast device like Google Home Mini", 
                        "package": "egeoffrey-notification-chromecast", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-chromecast", 
                        "manifest_schema": 2, 
                        "tags": "notification speaker voice chromecast", 
                        "modules": [
                            {
                                "notification/chromecast": {
                                    "description": "Play a notification through a Chromecast device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.53", 
                                            "description": "The hostname/IP address of the Chromecast device", 
                                            "name": "device_ip"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.254", 
                                            "description": "The IP address where this module runs (the device will connect back here to play the audio)", 
                                            "name": "local_ip"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "ports": [
                                "8081:8081"
                            ]
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "volume-up", 
                        "revision": 4
                    }
                }
            }
        }, 
        "egeoffrey-service-rtl_433": {
            "info": {
                "created_timestamp": 1565192790, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-rtl_433", 
                "created_string": "07/08/2019 15:46:30", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706798, 
                        "updated_string": "17/09/2019 07:53:18", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-rtl_433", 
                        "description": "Interact with an attached RTL-SDR device", 
                        "package": "egeoffrey-service-rtl_433", 
                        "dockerhub": "egeoffrey/egeoffrey-service-rtl_433", 
                        "manifest_schema": 2, 
                        "tags": "service rtl_433 rtl_sdr", 
                        "modules": [
                            {
                                "service/rtl_433": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/usr/local/bin/rtl_433", 
                                            "description": "The command for running rtl_433 executable", 
                                            "name": "port_listen"
                                        }
                                    ], 
                                    "description": "Interact with an attached RTL-SDR device", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "model=Generic Sensor&id=3d c1 5c", 
                                                "description": "Filter in provided data in a key1=value1&key2=value2 format", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The key whose value has to be retrieved", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "broadcast-tower", 
                        "revision": 13
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524589, 
                        "updated_string": "09/08/2021 15:56:29", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-rtl_433", 
                        "description": "Interact with an attached RTL-SDR device", 
                        "package": "egeoffrey-service-rtl_433", 
                        "dockerhub": "egeoffrey/egeoffrey-service-rtl_433", 
                        "manifest_schema": 2, 
                        "tags": "service rtl_433 rtl_sdr", 
                        "modules": [
                            {
                                "service/rtl_433": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/usr/local/bin/rtl_433", 
                                            "description": "The command for running rtl_433 executable", 
                                            "name": "command"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "-F json -U", 
                                            "description": "The arguments for running the rtl_433 command", 
                                            "name": "arguments"
                                        }
                                    ], 
                                    "description": "Interact with an attached RTL-SDR device", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "model=Generic Sensor&id=3d c1 5c", 
                                                "description": "Filter in provided data in a key1=value1&key2=value2 format", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The key whose value has to be retrieved", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "broadcast-tower", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-webhook": {
            "info": {
                "created_timestamp": 1599408610, 
                "created_days_ago": 573, 
                "repository": "egeoffrey/egeoffrey-notification-webhook", 
                "created_string": "06/09/2020 16:10:10", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628520510, 
                        "updated_string": "09/08/2021 14:48:30", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-webhook", 
                        "description": "forward notifications via a POST to a webhook URL, useful for integrating with IFTTT or Zapier", 
                        "package": "egeoffrey-notification-webhook", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-webhook", 
                        "manifest_schema": 2, 
                        "tags": "notification webhook ifttt zapier", 
                        "modules": [
                            {
                                "notification/webhook": {
                                    "description": "forward notifications to a webhook", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "https://maker.ifttt.com/trigger/event/asdasdasdqwdq789712ueikjhaskjf7as9", 
                                            "description": "The URL of the webhook", 
                                            "name": "url"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "house_name", 
                                            "description": "The name of the JSON key the House Name will be passed along", 
                                            "name": "house_name_key"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "severity", 
                                            "description": "The name of the JSON key the severity of the notification will be passed along", 
                                            "name": "severity_key"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "message", 
                                            "description": "The name of the JSON key the message of the notification will be passed along", 
                                            "name": "message_key"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "recycle", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-interaction-slack": {
            "info": {
                "created_timestamp": 1565192786, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-interaction-slack", 
                "created_string": "07/08/2019 15:46:26", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706787, 
                        "updated_string": "17/09/2019 07:53:07", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-interaction-slack", 
                        "description": "Connect to a slack channel as a bot and interact with the user", 
                        "package": "egeoffrey-interaction-slack", 
                        "dockerhub": "egeoffrey/egeoffrey-interaction-slack", 
                        "manifest_schema": 2, 
                        "tags": "interaction slack", 
                        "modules": [
                            {
                                "interaction/slack": {
                                    "description": "Connect to a slack channel as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot has to join", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "hashtag", 
                        "revision": 9
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628492544, 
                        "updated_string": "09/08/2021 07:02:24", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-interaction-slack", 
                        "description": "Connect to a slack channel as a bot and interact with the user", 
                        "package": "egeoffrey-interaction-slack", 
                        "dockerhub": "egeoffrey/egeoffrey-interaction-slack", 
                        "manifest_schema": 2, 
                        "tags": "interaction slack", 
                        "modules": [
                            {
                                "interaction/slack": {
                                    "description": "Connect to a slack channel as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot has to join", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "hashtag", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-gsm": {
            "info": {
                "created_timestamp": 1565192785, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-gsm", 
                "created_string": "07/08/2019 15:46:25", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706788, 
                        "updated_string": "17/09/2019 07:53:08", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-gsm", 
                        "description": "Send a sms or make a phone call through an attached serial device", 
                        "package": "egeoffrey-notification-gsm", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-gsm", 
                        "manifest_schema": 2, 
                        "tags": "notification sms serial voice", 
                        "modules": [
                            {
                                "notification/gsm_call": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_sms": {
                                    "description": "Send a sms through an attached serial device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ]
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "mobile-alt", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628493017, 
                        "updated_string": "09/08/2021 07:10:17", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-gsm", 
                        "description": "Send a sms or make a phone call through an attached serial device", 
                        "package": "egeoffrey-notification-gsm", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-gsm", 
                        "manifest_schema": 2, 
                        "tags": "notification sms serial voice", 
                        "modules": [
                            {
                                "notification/gsm_call": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/gsm_sms": {
                                    "description": "Send a sms through an attached serial device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/gsm", 
                                            "description": "The serial port the modem device is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 115200, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ]
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "mobile-alt", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-bluetooth": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-bluetooth", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706792, 
                        "updated_string": "17/09/2019 07:53:12", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-bluetooth", 
                        "description": "Retrieve values from a bluetooth/BLE device", 
                        "package": "egeoffrey-service-bluetooth", 
                        "dockerhub": "egeoffrey/egeoffrey-service-bluetooth", 
                        "manifest_schema": 2, 
                        "tags": "service bluetooth", 
                        "modules": [
                            {
                                "service/bluetooth": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "retrieve values from a bluetooth/BLE device", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "Handle address", 
                                                "name": "handle"
                                            }, 
                                            {
                                                "format": "value|notification", 
                                                "required": true, 
                                                "description": "Handle type", 
                                                "name": "handle_type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "00:11:22:33:44", 
                                                "description": "The MAC address of the device", 
                                                "name": "mac"
                                            }, 
                                            {
                                                "format": "number|string", 
                                                "required": false, 
                                                "description": "Format of the data to return", 
                                                "name": "format"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth_discover": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "discover bluetooth/BLE devices in range", 
                                    "service_configuration": {}
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "wifi", 
                        "revision": 13
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523358, 
                        "updated_string": "09/08/2021 15:35:58", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-bluetooth", 
                        "description": "Retrieve values from a bluetooth/BLE device", 
                        "package": "egeoffrey-service-bluetooth", 
                        "dockerhub": "egeoffrey/egeoffrey-service-bluetooth", 
                        "manifest_schema": 2, 
                        "tags": "service bluetooth", 
                        "modules": [
                            {
                                "service/bluetooth": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "retrieve values from a bluetooth/BLE device", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "Handle address", 
                                                "name": "handle"
                                            }, 
                                            {
                                                "format": "value|notification", 
                                                "required": true, 
                                                "description": "Handle type", 
                                                "name": "handle_type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "00:11:22:33:44", 
                                                "description": "The MAC address of the device", 
                                                "name": "mac"
                                            }, 
                                            {
                                                "format": "number|string", 
                                                "required": false, 
                                                "description": "Format of the data to return", 
                                                "name": "format"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/bluetooth_discover": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "hci0", 
                                            "description": "The adapter the bluetooth device is attached to", 
                                            "name": "adapter"
                                        }
                                    ], 
                                    "description": "discover bluetooth/BLE devices in range", 
                                    "service_configuration": {}
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "wifi", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-mobile": {
            "info": {
                "created_timestamp": 1574198005, 
                "created_days_ago": 865, 
                "repository": "egeoffrey/egeoffrey-notification-mobile", 
                "created_string": "19/11/2019 21:13:25", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628493036, 
                        "updated_string": "09/08/2021 07:10:36", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-mobile", 
                        "description": "forward notifications to a list of configured devices running the eGeoffrey mobile app", 
                        "package": "egeoffrey-notification-mobile", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-mobile", 
                        "manifest_schema": 2, 
                        "tags": "notification mobile ios android", 
                        "modules": [
                            {
                                "notification/mobile": {
                                    "description": "forward notifications to a list of configured devices running the eGeoffrey mobile app", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "Asadjaskld109213102312kljlcasldkd123", 
                                            "description": "List of tokens of the mobile devices to be notified, comma separated (to get the device token, open the eGeoffrey mobile app and tap on 'About')", 
                                            "name": "devices"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "mobile-alt", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-csv": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-csv", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706792, 
                        "updated_string": "17/09/2019 07:53:12", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-csv", 
                        "description": "Retrieve values from a csv file", 
                        "package": "egeoffrey-service-csv", 
                        "dockerhub": "egeoffrey/egeoffrey-service-csv", 
                        "manifest_schema": 2, 
                        "tags": "service csv", 
                        "modules": [
                            {
                                "service/csv": {
                                    "description": "Retrieve values from a csv file", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "https://www1.ncdc.noaa.gov/pub/data/cdo/samples/NORMAL_DLY_sample_csv.csv", 
                                                "description": "Location or URL of the CSV file", 
                                                "name": "csv_file"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "description": "Column number which contains the value to extract", 
                                                "name": "value_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "If defined, only the lines of the file with this value at this position will be evaluated", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column you want to filter in the csv file", 
                                                "name": "filter_position"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column of the date (UTC) in the csv file", 
                                                "name": "date_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The format of the date in strftime format", 
                                                "name": "date_format"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "An optional prefix of the value (that will be striped out) used as additional filter", 
                                                "name": "prefix"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "file-csv", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523398, 
                        "updated_string": "09/08/2021 15:36:38", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-csv", 
                        "description": "Retrieve values from a csv file", 
                        "package": "egeoffrey-service-csv", 
                        "dockerhub": "egeoffrey/egeoffrey-service-csv", 
                        "manifest_schema": 2, 
                        "tags": "service csv", 
                        "modules": [
                            {
                                "service/csv": {
                                    "description": "Retrieve values from a csv file", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "https://www1.ncdc.noaa.gov/pub/data/cdo/samples/NORMAL_DLY_sample_csv.csv", 
                                                "description": "Location or URL of the CSV file", 
                                                "name": "csv_file"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "description": "Column number which contains the value to extract", 
                                                "name": "value_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "If defined, only the lines of the file with this value at this position will be evaluated", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column you want to filter in the csv file", 
                                                "name": "filter_position"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column of the date (UTC) in the csv file", 
                                                "name": "date_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The format of the date in strftime format", 
                                                "name": "date_format"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "An optional prefix of the value (that will be striped out) used as additional filter", 
                                                "name": "prefix"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "file-csv", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-ds18b20": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-ds18b20", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706792, 
                        "updated_string": "17/09/2019 07:53:12", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-ds18b20", 
                        "description": "Retrieve temperature from a ds18b20 sensor", 
                        "package": "egeoffrey-service-ds18b20", 
                        "dockerhub": "egeoffrey/egeoffrey-service-ds18b20", 
                        "manifest_schema": 2, 
                        "tags": "service ds18b20 temperature weather raspberrypi", 
                        "modules": [
                            {
                                "service/ds18b20": {
                                    "description": "Retrieve temperature from a ds18b20 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "28-0000067b9508", 
                                                "description": "The device identifier that can be found under /sys/bus/w1/devices", 
                                                "name": "device"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "thermometer-three-quarters", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523933, 
                        "updated_string": "09/08/2021 15:45:33", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-ds18b20", 
                        "description": "Retrieve temperature from a ds18b20 sensor", 
                        "package": "egeoffrey-service-ds18b20", 
                        "dockerhub": "egeoffrey/egeoffrey-service-ds18b20", 
                        "manifest_schema": 2, 
                        "tags": "service ds18b20 temperature weather raspberrypi", 
                        "modules": [
                            {
                                "service/ds18b20": {
                                    "description": "Retrieve temperature from a ds18b20 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "28-0000067b9508", 
                                                "description": "The device identifier that can be found under /sys/bus/w1/devices", 
                                                "name": "device"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "thermometer-three-quarters", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-smtp": {
            "info": {
                "created_timestamp": 1565192786, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-smtp", 
                "created_string": "07/08/2019 15:46:26", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706788, 
                        "updated_string": "17/09/2019 07:53:08", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-smtp", 
                        "description": "Send out email notifications", 
                        "package": "egeoffrey-notification-smtp", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-smtp", 
                        "manifest_schema": 2, 
                        "tags": "notification email", 
                        "modules": [
                            {
                                "notification/smtp": {
                                    "description": "Send out email notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The email address used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "smtp.google.com", 
                                            "description": "The SMTP server used to send out the email", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the SMTP server", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the SMTP server", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use TLS", 
                                            "name": "tls"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "Recipient email address(es), comma separated", 
                                            "name": "to"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "House Notification", 
                                            "description": "Subject of the email", 
                                            "name": "subject"
                                        }, 
                                        {
                                            "format": "text", 
                                            "required": true, 
                                            "description": "Template to use for the email's body", 
                                            "name": "template"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "envelope", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628520428, 
                        "updated_string": "09/08/2021 14:47:08", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-smtp", 
                        "description": "Send out email notifications", 
                        "package": "egeoffrey-notification-smtp", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-smtp", 
                        "manifest_schema": 2, 
                        "tags": "notification email", 
                        "modules": [
                            {
                                "notification/smtp": {
                                    "description": "Send out email notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The email address used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "smtp.google.com", 
                                            "description": "The SMTP server used to send out the email", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 25, 
                                            "description": "The port of the SMTP server", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the SMTP server", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the SMTP server", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use TLS", 
                                            "name": "tls"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "Recipient email address(es), comma separated", 
                                            "name": "to"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "House Notification", 
                                            "description": "Subject of the email", 
                                            "name": "subject"
                                        }, 
                                        {
                                            "format": "text", 
                                            "required": true, 
                                            "description": "Template to use for the email's body (with placehoders", 
                                            "name": "template"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "envelope", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-ads1x15": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-ads1x15", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706789, 
                        "updated_string": "17/09/2019 07:53:09", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-ads1x15", 
                        "description": "retrieve values from a ads1x15 analog to digital converter", 
                        "package": "egeoffrey-service-ads1x15", 
                        "dockerhub": "egeoffrey/egeoffrey-service-ads1x15", 
                        "manifest_schema": 2, 
                        "tags": "service ads1x15 analog", 
                        "modules": [
                            {
                                "service/ads1x15": {
                                    "description": "retrieve values from a ads1x15 analog to digital converter", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "Channel to use", 
                                                "name": "channel"
                                            }, 
                                            {
                                                "format": "ads1115|ads1015", 
                                                "required": true, 
                                                "description": "Converter type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "The address to use", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "2/3|1|2|4|8|16", 
                                                "required": true, 
                                                "description": "Converter gain", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "volt|raw|integer|percentage", 
                                                "required": true, 
                                                "description": "What to output", 
                                                "name": "output"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "ruler", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628580795, 
                        "updated_string": "10/08/2021 07:33:15", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-ads1x15", 
                        "description": "retrieve values from a ads1x15 analog to digital converter", 
                        "package": "egeoffrey-service-ads1x15", 
                        "dockerhub": "egeoffrey/egeoffrey-service-ads1x15", 
                        "manifest_schema": 2, 
                        "tags": "service ads1x15 analog", 
                        "modules": [
                            {
                                "service/ads1x15": {
                                    "description": "retrieve values from a ads1x15 analog to digital converter", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "Channel to use", 
                                                "name": "channel"
                                            }, 
                                            {
                                                "format": "ads1115|ads1015", 
                                                "required": true, 
                                                "description": "Converter type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x49", 
                                                "description": "The address to use", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "2/3|1|2|4|8|16", 
                                                "required": true, 
                                                "description": "Converter gain", 
                                                "name": "address"
                                            }, 
                                            {
                                                "format": "volt|raw|integer|percentage", 
                                                "required": true, 
                                                "description": "What to output", 
                                                "name": "output"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "ruler", 
                        "revision": 2
                    }
                }
            }
        }, 
        "egeoffrey-notification-betamax_sms": {
            "info": {
                "created_timestamp": 1565192785, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-betamax_sms", 
                "created_string": "07/08/2019 15:46:25", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706787, 
                        "updated_string": "17/09/2019 07:53:07", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-betamax_sms", 
                        "description": "send out sms notifications (betamax voip service)", 
                        "package": "egeoffrey-notification-betamax_sms", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-betamax_sms", 
                        "manifest_schema": 2, 
                        "tags": "notification sms voip", 
                        "modules": [
                            {
                                "notification/betamax_sms": {
                                    "description": "send out sms notifications (betamax voip service)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "The phone number to be used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "www.frevoipdeal.com", 
                                            "description": "The Betamax hostname of your service", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "username", 
                                            "description": "The username of your betamax account", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": true, 
                                            "placeholder": "password", 
                                            "description": "The password of your betamax account", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use SSL", 
                                            "name": "ssl"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "sms", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628492648, 
                        "updated_string": "09/08/2021 07:04:08", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-betamax_sms", 
                        "description": "send out sms notifications (betamax voip service)", 
                        "package": "egeoffrey-notification-betamax_sms", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-betamax_sms", 
                        "manifest_schema": 2, 
                        "tags": "notification sms voip", 
                        "modules": [
                            {
                                "notification/betamax_sms": {
                                    "description": "send out sms notifications (betamax voip service)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "The phone number to be used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "www.frevoipdeal.com", 
                                            "description": "The Betamax hostname of your service", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "username", 
                                            "description": "The username of your betamax account", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": true, 
                                            "placeholder": "password", 
                                            "description": "The password of your betamax account", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use SSL", 
                                            "name": "ssl"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "sms", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-speaker": {
            "info": {
                "created_timestamp": 1565192786, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-speaker", 
                "created_string": "07/08/2019 15:46:26", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706788, 
                        "updated_string": "17/09/2019 07:53:08", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-speaker", 
                        "description": "Play a notification out loud through an attached speaker", 
                        "package": "egeoffrey-notification-speaker", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-speaker", 
                        "manifest_schema": 2, 
                        "tags": "notification speaker voice", 
                        "modules": [
                            {
                                "notification/speaker": {
                                    "description": "Play a notification out loud through an attached speaker", 
                                    "module_configuration": [
                                        {
                                            "format": "google|picotts", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The text-to-speach engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the speaker is attached to", 
                                            "name": "device"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Weather the speaker has to be connected through bluetooth", 
                                            "name": "bluetooth_speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "F5:B6:AB:45:63:C6", 
                                            "description": "The MAC address of the bluetooth speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": 100, 
                                            "description": "The volume to set to the speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host"
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "volume-up", 
                        "revision": 16
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628520456, 
                        "updated_string": "09/08/2021 14:47:36", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-speaker", 
                        "description": "Play a notification out loud through an attached speaker", 
                        "package": "egeoffrey-notification-speaker", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-speaker", 
                        "manifest_schema": 2, 
                        "tags": "notification speaker voice", 
                        "modules": [
                            {
                                "notification/speaker": {
                                    "description": "Play a notification out loud through an attached speaker", 
                                    "module_configuration": [
                                        {
                                            "format": "google|picotts", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The text-to-speach engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the speaker is attached to", 
                                            "name": "device"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Weather the speaker has to be connected through bluetooth", 
                                            "name": "bluetooth_speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "F5:B6:AB:45:63:C6", 
                                            "description": "The MAC address of the bluetooth speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": 100, 
                                            "description": "The volume to set to the speaker", 
                                            "name": "bluetooth_speaker_mac_address"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host"
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "volume-up", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-database": {
            "info": {
                "created_timestamp": 1565192784, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-database", 
                "created_string": "07/08/2019 15:46:24", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706783, 
                        "updated_string": "17/09/2019 07:53:03", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-database", 
                        "description": "Runs eGeoffrey database for storing sensors' information", 
                        "package": "egeoffrey-database", 
                        "dockerhub": "egeoffrey/egeoffrey-database", 
                        "manifest_schema": 2, 
                        "tags": "database", 
                        "modules": [], 
                        "container_config": {
                            "ports": [
                                "6379:6379"
                            ], 
                            "volumes": [
                                "./data/database/config:/database/config", 
                                "./data/database/data:/database/data"
                            ]
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "database", 
                        "revision": 7
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1570375240, 
                        "updated_string": "06/10/2019 15:20:40", 
                        "updated_days_ago": 909
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-database", 
                        "description": "Runs eGeoffrey database for storing sensors' information", 
                        "package": "egeoffrey-database", 
                        "dockerhub": "egeoffrey/egeoffrey-database", 
                        "manifest_schema": 2, 
                        "tags": "database", 
                        "modules": [], 
                        "container_config": {
                            "ports": [
                                "6379:6379"
                            ], 
                            "volumes": [
                                "./data/database/data:/database/data"
                            ]
                        }, 
                        "version": 1.0, 
                        "branch": "master", 
                        "icon": "database", 
                        "revision": 13
                    }
                }
            }
        }, 
        "egeoffrey-service-command": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-command", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706793, 
                        "updated_string": "17/09/2019 07:53:13", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-command", 
                        "description": "Run system commands, useful to e.g. interact with a utility which communicates with a sensor", 
                        "package": "egeoffrey-service-command", 
                        "dockerhub": "egeoffrey/egeoffrey-service-command", 
                        "manifest_schema": 2, 
                        "tags": "service command os", 
                        "modules": [
                            {
                                "service/command": {
                                    "description": "Run system commands", 
                                    "service_configuration": {
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "reboot", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "uptime", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "terminal", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523379, 
                        "updated_string": "09/08/2021 15:36:19", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-command", 
                        "description": "Run system commands, useful to e.g. interact with a utility which communicates with a sensor", 
                        "package": "egeoffrey-service-command", 
                        "dockerhub": "egeoffrey/egeoffrey-service-command", 
                        "manifest_schema": 2, 
                        "tags": "service command os", 
                        "modules": [
                            {
                                "service/command": {
                                    "description": "Run system commands", 
                                    "service_configuration": {
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "reboot", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "uptime", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "terminal", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-system": {
            "info": {
                "created_timestamp": 1565192790, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-system", 
                "created_string": "07/08/2019 15:46:30", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706800, 
                        "updated_string": "17/09/2019 07:53:20", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-system", 
                        "description": "Collect telemetry information from the system", 
                        "package": "egeoffrey-service-system", 
                        "dockerhub": "egeoffrey/egeoffrey-service-system", 
                        "manifest_schema": 2, 
                        "tags": "service cpu memory", 
                        "modules": [
                            {
                                "service/system": {
                                    "description": "Collect telemetry information from the system", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "cpu_user|cpu_system|ram_used|swap_used|load_1|load_5|load_15|network_services|network_connections|temperature|uptime|logwatch|reboot|shutdown|system_logs", 
                                                "required": true, 
                                                "description": "The statistic to retrieve", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "server", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524610, 
                        "updated_string": "09/08/2021 15:56:50", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-system", 
                        "description": "Collect telemetry information from the system", 
                        "package": "egeoffrey-service-system", 
                        "dockerhub": "egeoffrey/egeoffrey-service-system", 
                        "manifest_schema": 2, 
                        "tags": "service cpu memory", 
                        "modules": [
                            {
                                "service/system": {
                                    "description": "Collect telemetry information from the system", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "cpu_user|cpu_system|ram_used|swap_used|load_1|load_5|load_15|network_services|network_connections|temperature|uptime|logwatch|reboot|shutdown|system_logs", 
                                                "required": true, 
                                                "description": "The statistic to retrieve", 
                                                "name": "measure"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "server", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-messagebridge": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-messagebridge", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1569143084, 
                        "updated_string": "22/09/2019 09:04:44", 
                        "updated_days_ago": 923
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-messagebridge", 
                        "description": "Interact with Ciseco/WirelessThings devices", 
                        "package": "egeoffrey-service-messagebridge", 
                        "dockerhub": "egeoffrey/egeoffrey-service-messagebridge", 
                        "manifest_schema": 2, 
                        "tags": "service ciseco wirelessthings", 
                        "modules": [
                            {
                                "service/messagebridge": {
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50140, 
                                            "description": "The udp port the Messagebridge is broadcasting data to", 
                                            "name": "port_listen"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50141, 
                                            "description": "The udp port the Messagebridge is listening", 
                                            "name": "port_send"
                                        }
                                    ], 
                                    "description": "Interact with Ciseco/WirelessThings devices", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TEMP", 
                                                "description": "The measure to take", 
                                                "name": "measure"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 5, 
                                                "description": "For devices with a Generic IO firmware put it to sleep for additional minutes", 
                                                "name": "cycle_sleep_min"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host"
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "microchip", 
                        "revision": 15
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524066, 
                        "updated_string": "09/08/2021 15:47:46", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-messagebridge", 
                        "description": "Interact with Ciseco/WirelessThings devices", 
                        "package": "egeoffrey-service-messagebridge", 
                        "dockerhub": "egeoffrey/egeoffrey-service-messagebridge", 
                        "manifest_schema": 2, 
                        "tags": "service ciseco wirelessthings", 
                        "modules": [
                            {
                                "service/messagebridge": {
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50140, 
                                            "description": "The udp port the Messagebridge is broadcasting data to", 
                                            "name": "port_listen"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 50141, 
                                            "description": "The udp port the Messagebridge is listening", 
                                            "name": "port_send"
                                        }
                                    ], 
                                    "description": "Interact with Ciseco/WirelessThings devices", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TEMP", 
                                                "description": "The measure to take", 
                                                "name": "measure"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "TA", 
                                                "description": "The ID of the device", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 5, 
                                                "description": "For devices with a Generic IO firmware put it to sleep for additional minutes", 
                                                "name": "cycle_sleep_min"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "network_mode": "host"
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "microchip", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-icloud": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-icloud", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706796, 
                        "updated_string": "17/09/2019 07:53:16", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-icloud", 
                        "description": "Retrieve position of a device from Apple icloud service", 
                        "package": "egeoffrey-service-icloud", 
                        "dockerhub": "egeoffrey/egeoffrey-service-icloud", 
                        "manifest_schema": 2, 
                        "tags": "service apple position", 
                        "modules": [
                            {
                                "service/icloud": {
                                    "description": "Retrieve position of a device from Apple icloud service", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "username@email.com", 
                                                "description": "The username of the icloud account", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": true, 
                                                "description": "The password of the icloud account", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "my_iPhone", 
                                                "description": "The name of the device to monitor", 
                                                "name": "device_name"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "apple-alt", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524018, 
                        "updated_string": "09/08/2021 15:46:58", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-icloud", 
                        "description": "Retrieve position of a device from Apple icloud service", 
                        "package": "egeoffrey-service-icloud", 
                        "dockerhub": "egeoffrey/egeoffrey-service-icloud", 
                        "manifest_schema": 2, 
                        "tags": "service apple position", 
                        "modules": [
                            {
                                "service/icloud": {
                                    "description": "Retrieve position of a device from Apple icloud service", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "username@email.com", 
                                                "description": "The username of the icloud account", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": true, 
                                                "description": "The password of the icloud account", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "my_iPhone", 
                                                "description": "The name of the device to monitor", 
                                                "name": "device_name"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "apple-alt", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-weatherchannel": {
            "info": {
                "created_timestamp": 1565192790, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-weatherchannel", 
                "created_string": "07/08/2019 15:46:30", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706800, 
                        "updated_string": "17/09/2019 07:53:20", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-weatherchannel", 
                        "description": "Retrieve weather information from weatherchannel", 
                        "package": "egeoffrey-service-weatherchannel", 
                        "dockerhub": "egeoffrey/egeoffrey-service-weatherchannel", 
                        "manifest_schema": 2, 
                        "tags": "service weather alert", 
                        "modules": [
                            {
                                "service/weatherchannel": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your WeatherChannel API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from weatherchannel", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "alerts", 
                                                "required": true, 
                                                "description": "What to request", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "cloud-sun", 
                        "revision": 12
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524629, 
                        "updated_string": "09/08/2021 15:57:09", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-weatherchannel", 
                        "description": "Retrieve weather information from weatherchannel", 
                        "package": "egeoffrey-service-weatherchannel", 
                        "dockerhub": "egeoffrey/egeoffrey-service-weatherchannel", 
                        "manifest_schema": 2, 
                        "tags": "service weather alert", 
                        "modules": [
                            {
                                "service/weatherchannel": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your WeatherChannel API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from weatherchannel", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "alerts", 
                                                "required": true, 
                                                "description": "What to request", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "cloud-sun", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-mqtt": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-mqtt", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1629377008, 
                        "updated_string": "19/08/2021 12:43:28", 
                        "updated_days_ago": 226
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-mqtt", 
                        "description": "Interact with sensors through a mqtt broker", 
                        "language": "python3", 
                        "package": "egeoffrey-service-mqtt", 
                        "dockerhub": "egeoffrey/egeoffrey-service-mqtt", 
                        "manifest_schema": 2, 
                        "tags": "service mqtt", 
                        "modules": [
                            {
                                "service/mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/in", 
                                                "description": "The topic to subscribe", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the JSON payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2 (for JSON input only)", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/out", 
                                                "description": "The topic to publish to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.2, 
                        "branch": "development", 
                        "sdk_branch": "development", 
                        "icon": "project-diagram", 
                        "revision": 1
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524512, 
                        "updated_string": "09/08/2021 15:55:12", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-mqtt", 
                        "description": "Interact with sensors through a mqtt broker", 
                        "package": "egeoffrey-service-mqtt", 
                        "dockerhub": "egeoffrey/egeoffrey-service-mqtt", 
                        "manifest_schema": 2, 
                        "tags": "service mqtt", 
                        "modules": [
                            {
                                "service/mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/in", 
                                                "description": "The topic to subscribe", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the JSON payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2 (for JSON input only)", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/out", 
                                                "description": "The topic to publish to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "project-diagram", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-interaction-telegram": {
            "info": {
                "created_timestamp": 1575240227, 
                "created_days_ago": 853, 
                "repository": "egeoffrey/egeoffrey-interaction-telegram", 
                "created_string": "01/12/2019 22:43:47", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628579155, 
                        "updated_string": "10/08/2021 07:05:55", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-interaction-telegram", 
                        "description": "Connect to a Telegram group as a bot and interact with the users", 
                        "package": "egeoffrey-interaction-telegram", 
                        "dockerhub": "egeoffrey/egeoffrey-interaction-telegram", 
                        "manifest_schema": 2, 
                        "tags": "interaction telegram", 
                        "modules": [
                            {
                                "interaction/telegram_messenger": {
                                    "description": "Connect to a Telegram group as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The command to use as a prefix for interacting with the bot (e.g. /housebot hi)", 
                                            "name": "command_handler"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "hashtag", 
                        "revision": 2
                    }
                }
            }
        }, 
        "egeoffrey-service-openweathermap": {
            "info": {
                "created_timestamp": 1565192789, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-openweathermap", 
                "created_string": "07/08/2019 15:46:29", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706797, 
                        "updated_string": "17/09/2019 07:53:17", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-openweathermap", 
                        "description": "Retrieve weather information from OpenWeatherMap", 
                        "package": "egeoffrey-service-openweathermap", 
                        "dockerhub": "egeoffrey/egeoffrey-service-openweathermap", 
                        "manifest_schema": 2, 
                        "tags": "service weather", 
                        "modules": [
                            {
                                "service/openweathermap": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your OpenWeatherMap API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from OpenWeatherMap", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|rain_1h|rain_3h|snow_1h|snow_3h|clouds|uv|forecast_temperature|forecast_pressure|forecast_humidity|forecast_wind|forecast_wind_dir|forecast_condition|forecast_description|forecast_visibility|forecast_rain_3h|forecast_snow_3h|forecast_clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "cloud-sun", 
                        "revision": 20
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524548, 
                        "updated_string": "09/08/2021 15:55:48", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-openweathermap", 
                        "description": "Retrieve weather information from OpenWeatherMap", 
                        "package": "egeoffrey-service-openweathermap", 
                        "dockerhub": "egeoffrey/egeoffrey-service-openweathermap", 
                        "manifest_schema": 2, 
                        "tags": "service weather", 
                        "modules": [
                            {
                                "service/openweathermap": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your OpenWeatherMap API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from OpenWeatherMap", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|rain_1h|rain_3h|snow_1h|snow_3h|clouds|uv|forecast_temperature|forecast_pressure|forecast_humidity|forecast_wind|forecast_wind_dir|forecast_condition|forecast_description|forecast_visibility|forecast_rain_3h|forecast_snow_3h|forecast_clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "cloud-sun", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-controller": {
            "info": {
                "created_timestamp": 1565192784, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-controller", 
                "created_string": "07/08/2019 15:46:24", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628014786, 
                        "updated_string": "03/08/2021 18:19:46", 
                        "updated_days_ago": 242
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-controller", 
                        "description": "The eGeoffrey controller manages the configuration of all the modules and coordinates sensors and run alerting rules", 
                        "package": "egeoffrey-controller", 
                        "dockerhub": "egeoffrey/egeoffrey-controller", 
                        "manifest_schema": 2, 
                        "tags": "controller", 
                        "modules": [
                            {
                                "controller/logger": {
                                    "description": "Takes care of collecting the logs from all the local and remote modules, storing them in the database and printing them out", 
                                    "module_configuration": [
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging into the database", 
                                            "name": "database_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "database_retention"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging to file (in the /logs directory)", 
                                            "name": "file_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Rotate the log file when reaching this size (in megabytes)", 
                                            "name": "file_rotate_size"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Number of files to keep when rotating the logs", 
                                            "name": "file_rotate_count"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/db": {
                                    "description": "Connects to the database and runs queries on behalf of other modules", 
                                    "module_configuration": [
                                        {
                                            "format": "redis|mongodb", 
                                            "required": true, 
                                            "description": "The underlying database to use", 
                                            "name": "type"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-database", 
                                            "description": "The IP/hostname the Redis database is listening to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6379, 
                                            "description": "The port the Redis database is listening to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 1, 
                                            "description": "The database number to use for storing the information", 
                                            "name": "database"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "root", 
                                            "description": "The username for connecting to the database", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "password", 
                                            "description": "The password for connecting to the database", 
                                            "name": "password"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/config": {
                                    "description": "Stores configuration files on behalf of all the modules and makes them available"
                                }
                            }, 
                            {
                                "controller/alerter": {
                                    "description": "Keep running the configured rules which would trigger notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "retention"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "Prevent the same rule to run again within this timeframe in seconds to avoid loops", 
                                            "name": "loop_safeguard"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/chatbot": {
                                    "description": "Interactive chatbot service", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Chatbot's basic vocabulary", 
                                            "name": "vocabulary"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/hub": {
                                    "description": "Hub for collecting new measures from sensors", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Aggregation policies that can be associated to sensors to e.g. automatically calculate average, minimum and maximum per hour/day", 
                                            "name": "calculate"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Retention policies that can be associated to sensors to e.g. automatically purge old values from the database", 
                                            "name": "retain"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Set of available post processing commands that can be associated to sensors to e.g. automatically post-process a new value once collected", 
                                            "name": "post_processors"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "description": "if requested to save the same sensor's value of the latest in a very short time, ignore it (tolerance in seconds)", 
                                            "name": "duplicates_tolerance"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": false, 
                                            "description": "if pinning (retaining) the last value of each sensor on the message bus", 
                                            "name": "pin_last_values"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "environment": [
                                "EGEOFFREY_LOGGING_LOCAL=0"
                            ], 
                            "volumes": [
                                "./data/egeoffrey/logs:/egeoffrey/logs", 
                                "./data/egeoffrey/config:/egeoffrey/config"
                            ]
                        }, 
                        "version": 1.4, 
                        "branch": "master", 
                        "icon": "gamepad", 
                        "revision": 5
                    }
                }, 
                "python3": {
                    "info": {
                        "updated_timestamp": 1584342166, 
                        "updated_string": "16/03/2020 07:02:46", 
                        "updated_days_ago": 748
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-controller", 
                        "description": "The eGeoffrey controller manages the configuration of all the modules and coordinates sensors and run alerting rules", 
                        "package": "egeoffrey-controller", 
                        "dockerhub": "egeoffrey/egeoffrey-controller", 
                        "manifest_schema": 2, 
                        "tags": "controller", 
                        "modules": [
                            {
                                "controller/logger": {
                                    "description": "Takes care of collecting the logs from all the local and remote modules, storing them in the database and printing them out", 
                                    "module_configuration": [
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging into the database", 
                                            "name": "database_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "database_retention"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging to file (in the /logs directory)", 
                                            "name": "file_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Rotate the log file when reaching this size (in megabytes)", 
                                            "name": "file_rotate_size"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Number of files to keep when rotating the logs", 
                                            "name": "file_rotate_count"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/db": {
                                    "description": "Connects to the database and runs queries on behalf of other modules", 
                                    "module_configuration": [
                                        {
                                            "format": "redis|mongodb", 
                                            "required": true, 
                                            "description": "The underlying database to use", 
                                            "name": "type"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-database", 
                                            "description": "The IP/hostname the Redis database is listening to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6379, 
                                            "description": "The port the Redis database is listening to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 1, 
                                            "description": "The database number to use for storing the information", 
                                            "name": "database"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "root", 
                                            "description": "The username for connecting to the database", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "password", 
                                            "description": "The password for connecting to the database", 
                                            "name": "password"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/config": {
                                    "description": "Stores configuration files on behalf of all the modules and makes them available"
                                }
                            }, 
                            {
                                "controller/alerter": {
                                    "description": "Keep running the configured rules which would trigger notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "retention"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/chatbot": {
                                    "description": "Interactive chatbot service", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Chatbot's basic vocabulary", 
                                            "name": "vocabulary"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/hub": {
                                    "description": "Hub for collecting new measures from sensors", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Aggregation policies that can be associated to sensors to e.g. automatically calculate average, minimum and maximum per hour/day", 
                                            "name": "calculate"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Retention policies that can be associated to sensors to e.g. automatically purge old values from the database", 
                                            "name": "retain"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Set of available post processing commands that can be associated to sensors to e.g. automatically post-process a new value once collected", 
                                            "name": "post_processors"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "description": "if requested to save the same sensor's value of the latest in a very short time, ignore it (tolerance in seconds)", 
                                            "name": "duplicates_tolerance"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "environment": [
                                "EGEOFFREY_LOGGING_LOCAL=0"
                            ], 
                            "volumes": [
                                "./data/egeoffrey/logs:/egeoffrey/logs", 
                                "./data/egeoffrey/config:/egeoffrey/config"
                            ]
                        }, 
                        "version": 1.1, 
                        "branch": "python3", 
                        "sdk_branch": "python3", 
                        "icon": "gamepad", 
                        "revision": 13
                    }
                }
            }
        }, 
        "egeoffrey-interaction-microphone": {
            "info": {
                "created_timestamp": 1565192784, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-interaction-microphone", 
                "created_string": "07/08/2019 15:46:24", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706783, 
                        "updated_string": "17/09/2019 07:53:03", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-interaction-microphone", 
                        "description": "Capture voice commands and respond accordingly", 
                        "package": "egeoffrey-interaction-microphone", 
                        "dockerhub": "egeoffrey/egeoffrey-interaction-microphone", 
                        "manifest_schema": 2, 
                        "tags": "interaction voice", 
                        "modules": [
                            {
                                "interaction/microphone": {
                                    "description": "Capture voice commands and respond accordingly", 
                                    "module_configuration": [
                                        {
                                            "format": "google|pocketsphinx", 
                                            "required": true, 
                                            "description": "The speech-to-text engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "speaker", 
                                            "description": "The name of the eGeoffrey notification service the speaker is running on", 
                                            "name": "speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the microphone is attached to", 
                                            "name": "device"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "microphone", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628492509, 
                        "updated_string": "09/08/2021 07:01:49", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-interaction-microphone", 
                        "description": "Capture voice commands and respond accordingly", 
                        "package": "egeoffrey-interaction-microphone", 
                        "dockerhub": "egeoffrey/egeoffrey-interaction-microphone", 
                        "manifest_schema": 2, 
                        "tags": "interaction voice", 
                        "modules": [
                            {
                                "interaction/microphone": {
                                    "description": "Capture voice commands and respond accordingly", 
                                    "module_configuration": [
                                        {
                                            "format": "google|pocketsphinx", 
                                            "required": true, 
                                            "description": "The speech-to-text engine to use", 
                                            "name": "engine"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "speaker", 
                                            "description": "The name of the eGeoffrey notification service the speaker is running on", 
                                            "name": "speaker"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "plughw:1,0", 
                                            "description": "The ALSA device the microphone is attached to", 
                                            "name": "device"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "microphone", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-fcc_weather": {
            "info": {
                "created_timestamp": 1565192788, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-fcc_weather", 
                "created_string": "07/08/2019 15:46:28", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706793, 
                        "updated_string": "17/09/2019 07:53:13", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-fcc_weather", 
                        "description": "Retrieve weather information from Free Code Camp Weather API", 
                        "package": "egeoffrey-service-fcc_weather", 
                        "dockerhub": "egeoffrey/egeoffrey-service-fcc_weather", 
                        "manifest_schema": 2, 
                        "tags": "service weather", 
                        "modules": [
                            {
                                "service/fcc_weather": {
                                    "description": "Retrieve weather information from Free Code Camp Weather API", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "cloud-sun", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523976, 
                        "updated_string": "09/08/2021 15:46:16", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-fcc_weather", 
                        "description": "Retrieve weather information from Free Code Camp Weather API", 
                        "package": "egeoffrey-service-fcc_weather", 
                        "dockerhub": "egeoffrey/egeoffrey-service-fcc_weather", 
                        "manifest_schema": 2, 
                        "tags": "service weather", 
                        "modules": [
                            {
                                "service/fcc_weather": {
                                    "description": "Retrieve weather information from Free Code Camp Weather API", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "cloud-sun", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-earthquake": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-earthquake", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706793, 
                        "updated_string": "17/09/2019 07:53:13", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-earthquake", 
                        "description": "Retrieve earthquake information", 
                        "package": "egeoffrey-service-earthquake", 
                        "dockerhub": "egeoffrey/egeoffrey-service-earthquake", 
                        "manifest_schema": 2, 
                        "tags": "service earthquake", 
                        "modules": [
                            {
                                "service/earthquake": {
                                    "description": "Retrieve earthquake information", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "earthquake.usgs.gov", 
                                                "description": "The domain hosting the FDSN Web Services", 
                                                "name": "domain"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "minmag=7", 
                                                "description": "A query in the format key1=value1&key=value2", 
                                                "name": "query"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "globe-africa", 
                        "revision": 22
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523951, 
                        "updated_string": "09/08/2021 15:45:51", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-earthquake", 
                        "description": "Retrieve earthquake information", 
                        "package": "egeoffrey-service-earthquake", 
                        "dockerhub": "egeoffrey/egeoffrey-service-earthquake", 
                        "manifest_schema": 2, 
                        "tags": "service earthquake", 
                        "modules": [
                            {
                                "service/earthquake": {
                                    "description": "Retrieve earthquake information", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "earthquake.usgs.gov", 
                                                "description": "The domain hosting the FDSN Web Services", 
                                                "name": "domain"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "minmag=7", 
                                                "description": "A query in the format key1=value1&key=value2", 
                                                "name": "query"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "globe-africa", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-zigbee2mqtt": {
            "info": {
                "created_timestamp": 1569346810, 
                "created_days_ago": 921, 
                "repository": "egeoffrey/egeoffrey-service-zigbee2mqtt", 
                "created_string": "24/09/2019 17:40:10", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1628524649, 
                        "updated_string": "09/08/2021 15:57:29", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-zigbee2mqtt", 
                        "description": "Integrate with Zigbee2mqtt by connecting to the same mqtt broker Zigbee2mqtt is publishing devices data", 
                        "package": "egeoffrey-service-zigbee2mqtt", 
                        "dockerhub": "egeoffrey/egeoffrey-service-zigbee2mqtt", 
                        "manifest_schema": 2, 
                        "tags": "service mqtt zigbee", 
                        "modules": [
                            {
                                "service/zigbee2mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT broker hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "zigbee2mqtt", 
                                            "description": "Zigbee2mqtt base topic", 
                                            "name": "base_topic"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "0x00158d000346c0b3", 
                                                "description": "The friendly name assiged to the device", 
                                                "name": "device_id"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "microchip", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-collection-core": {
            "info": {
                "created_timestamp": 1567700535, 
                "created_days_ago": 940, 
                "repository": "egeoffrey/egeoffrey-collection-core", 
                "created_string": "05/09/2019 16:22:15", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1628664217, 
                        "updated_string": "11/08/2021 06:43:37", 
                        "updated_days_ago": 235
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-collection-core", 
                        "description": "An All-In-One collection of the core eGeoffrey packages", 
                        "package": "egeoffrey-collection-core", 
                        "dockerhub": "egeoffrey/egeoffrey-collection-core", 
                        "manifest_schema": 2, 
                        "tags": "collection core", 
                        "modules": [
                            {
                                "controller/logger": {
                                    "description": "Takes care of collecting the logs from all the local and remote modules, storing them in the database and printing them out", 
                                    "module_configuration": [
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging into the database", 
                                            "name": "database_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "database_retention"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging to file (in the /logs directory)", 
                                            "name": "file_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Rotate the log file when reaching this size (in megabytes)", 
                                            "name": "file_rotate_size"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Number of files to keep when rotating the logs", 
                                            "name": "file_rotate_count"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/db": {
                                    "description": "Connects to the database and runs queries on behalf of other modules", 
                                    "module_configuration": [
                                        {
                                            "format": "redis|mongodb", 
                                            "required": true, 
                                            "description": "The underlying database to use", 
                                            "name": "type"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-database", 
                                            "description": "The IP/hostname the Redis database is listening to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6379, 
                                            "description": "The port the Redis database is listening to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 1, 
                                            "description": "The database number to use for storing the information", 
                                            "name": "database"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "root", 
                                            "description": "The username for connecting to the database", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "password", 
                                            "description": "The password for connecting to the database", 
                                            "name": "password"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/config": {
                                    "description": "Stores configuration files on behalf of all the modules and makes them available"
                                }
                            }, 
                            {
                                "controller/alerter": {
                                    "description": "Keep running the configured rules which would trigger notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "retention"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "Prevent the same rule to run again within this timeframe in seconds to avoid loops", 
                                            "name": "loop_safeguard"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/chatbot": {
                                    "description": "Interactive chatbot service", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Chatbot's basic vocabulary", 
                                            "name": "vocabulary"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/hub": {
                                    "description": "Hub for collecting new measures from sensors", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Aggregation policies that can be associated to sensors to e.g. automatically calculate average, minimum and maximum per hour/day", 
                                            "name": "calculate"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Retention policies that can be associated to sensors to e.g. automatically purge old values from the database", 
                                            "name": "retain"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Set of available post processing commands that can be associated to sensors to e.g. automatically post-process a new value once collected", 
                                            "name": "post_processors"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "description": "if requested to save the same sensor's value of the latest in a very short time, ignore it (tolerance in seconds)", 
                                            "name": "duplicates_tolerance"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": false, 
                                            "description": "if pinning (retaining) the last value of each sensor on the message bus", 
                                            "name": "pin_last_values"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "gui/webserver": {
                                    "description": "Runs the webserver serving eGeoffrey's web interface"
                                }
                            }, 
                            {
                                "interaction/slack": {
                                    "description": "Connect to a slack channel as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot has to join", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "interaction/telegram_messenger": {
                                    "description": "Connect to a Telegram group as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The command to use as a prefix for interacting with the bot (e.g. /housebot hi)", 
                                            "name": "command_handler"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/betamax_sms": {
                                    "description": "send out sms notifications (betamax voip service)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "The phone number to be used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "www.frevoipdeal.com", 
                                            "description": "The Betamax hostname of your service", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "username", 
                                            "description": "The username of your betamax account", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": true, 
                                            "placeholder": "password", 
                                            "description": "The password of your betamax account", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use SSL", 
                                            "name": "ssl"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/slack": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot will send notifications to", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/smtp": {
                                    "description": "Send out email notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The email address used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "smtp.google.com", 
                                            "description": "The SMTP server used to send out the email", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 25, 
                                            "description": "The port of the SMTP server", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the SMTP server", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the SMTP server", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use TLS", 
                                            "name": "tls"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "Recipient email address(es), comma separated", 
                                            "name": "to"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "House Notification", 
                                            "description": "Subject of the email", 
                                            "name": "subject"
                                        }, 
                                        {
                                            "format": "text", 
                                            "required": true, 
                                            "description": "Template to use for the email's body (with placehoders", 
                                            "name": "template"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/mobile": {
                                    "description": "forward notifications to a list of configured devices running the eGeoffrey mobile app", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "Asadjaskld109213102312kljlcasldkd123", 
                                            "description": "List of tokens of the mobile devices to be notified, comma separated (to get the device token, open the eGeoffrey mobile app and tap on 'About')", 
                                            "name": "devices"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/telegram_messenger": {
                                    "description": "Send a notification via Telegram to a user or a group", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The chat_id you want to send the message to (https://t.me/gettingidbot)", 
                                            "name": "chat_id"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/chromecast": {
                                    "description": "Play a notification through a Chromecast device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.53", 
                                            "description": "The hostname/IP address of the Chromecast device", 
                                            "name": "device_ip"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.254", 
                                            "description": "The IP address where this module runs (the device will connect back here to play the audio)", 
                                            "name": "local_ip"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "service/command": {
                                    "description": "Run system commands", 
                                    "service_configuration": {
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "reboot", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "uptime", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/csv": {
                                    "description": "Retrieve values from a csv file", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "https://www1.ncdc.noaa.gov/pub/data/cdo/samples/NORMAL_DLY_sample_csv.csv", 
                                                "description": "Location or URL of the CSV file", 
                                                "name": "csv_file"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "description": "Column number which contains the value to extract", 
                                                "name": "value_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "If defined, only the lines of the file with this value at this position will be evaluated", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column you want to filter in the csv file", 
                                                "name": "filter_position"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column of the date (UTC) in the csv file", 
                                                "name": "date_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The format of the date in strftime format", 
                                                "name": "date_format"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "An optional prefix of the value (that will be striped out) used as additional filter", 
                                                "name": "prefix"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/earthquake": {
                                    "description": "Retrieve earthquake information", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "earthquake.usgs.gov", 
                                                "description": "The domain hosting the FDSN Web Services", 
                                                "name": "domain"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "minmag=7", 
                                                "description": "A query in the format key1=value1&key=value2", 
                                                "name": "query"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/fcc_weather": {
                                    "description": "Retrieve weather information from Free Code Camp Weather API", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/icloud": {
                                    "description": "Retrieve position of a device from Apple icloud service", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "username@email.com", 
                                                "description": "The username of the icloud account", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": true, 
                                                "description": "The password of the icloud account", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "my_iPhone", 
                                                "description": "The name of the device to monitor", 
                                                "name": "device_name"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/in", 
                                                "description": "The topic to subscribe", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the JSON payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2 (for JSON input only)", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/out", 
                                                "description": "The topic to publish to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/openweathermap": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your OpenWeatherMap API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from OpenWeatherMap", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|rain_1h|rain_3h|snow_1h|snow_3h|clouds|uv|forecast_temperature|forecast_pressure|forecast_humidity|forecast_wind|forecast_wind_dir|forecast_condition|forecast_description|forecast_visibility|forecast_rain_3h|forecast_snow_3h|forecast_clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/rss": {
                                    "description": "Parse a RSS feed", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "http://rss.cnn.com/rss/cnn_latest.rss", 
                                                "description": "The url of the RSS feed", 
                                                "name": "url"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/weatherchannel": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your WeatherChannel API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from weatherchannel", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "alerts", 
                                                "required": true, 
                                                "description": "What to request", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "environment": [
                                "EGEOFFREY_LOGGING_LOCAL=0"
                            ], 
                            "ports": [
                                "8081:8081"
                            ], 
                            "volumes": [
                                "./data/egeoffrey/logs:/egeoffrey/logs", 
                                "./data/egeoffrey/config:/egeoffrey/config"
                            ]
                        }, 
                        "version": 1.2, 
                        "branch": "development", 
                        "icon": "cube", 
                        "revision": 1
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1629436456, 
                        "updated_string": "20/08/2021 05:14:16", 
                        "updated_days_ago": 226
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-collection-core", 
                        "description": "An All-In-One collection of the core eGeoffrey packages", 
                        "package": "egeoffrey-collection-core", 
                        "dockerhub": "egeoffrey/egeoffrey-collection-core", 
                        "manifest_schema": 2, 
                        "tags": "collection core", 
                        "modules": [
                            {
                                "controller/logger": {
                                    "description": "Takes care of collecting the logs from all the local and remote modules, storing them in the database and printing them out", 
                                    "module_configuration": [
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging into the database", 
                                            "name": "database_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "database_retention"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Enable logging to file (in the /logs directory)", 
                                            "name": "file_enable"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Rotate the log file when reaching this size (in megabytes)", 
                                            "name": "file_rotate_size"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5, 
                                            "description": "Number of files to keep when rotating the logs", 
                                            "name": "file_rotate_count"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/db": {
                                    "description": "Connects to the database and runs queries on behalf of other modules", 
                                    "module_configuration": [
                                        {
                                            "format": "redis|mongodb", 
                                            "required": true, 
                                            "description": "The underlying database to use", 
                                            "name": "type"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-database", 
                                            "description": "The IP/hostname the Redis database is listening to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6379, 
                                            "description": "The port the Redis database is listening to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 1, 
                                            "description": "The database number to use for storing the information", 
                                            "name": "database"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "root", 
                                            "description": "The username for connecting to the database", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "string", 
                                            "placeholder": "password", 
                                            "description": "The password for connecting to the database", 
                                            "name": "password"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/config": {
                                    "description": "Stores configuration files on behalf of all the modules and makes them available"
                                }
                            }, 
                            {
                                "controller/alerter": {
                                    "description": "Keep running the configured rules which would trigger notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 6, 
                                            "description": "Number of days to keep old logs in the database", 
                                            "name": "retention"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "Prevent the same rule to run again within this timeframe in seconds to avoid loops", 
                                            "name": "loop_safeguard"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/chatbot": {
                                    "description": "Interactive chatbot service", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Chatbot's basic vocabulary", 
                                            "name": "vocabulary"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "controller/hub": {
                                    "description": "Hub for collecting new measures from sensors", 
                                    "module_configuration": [
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Aggregation policies that can be associated to sensors to e.g. automatically calculate average, minimum and maximum per hour/day", 
                                            "name": "calculate"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Retention policies that can be associated to sensors to e.g. automatically purge old values from the database", 
                                            "name": "retain"
                                        }, 
                                        {
                                            "format": "dict", 
                                            "required": true, 
                                            "description": "Set of available post processing commands that can be associated to sensors to e.g. automatically post-process a new value once collected", 
                                            "name": "post_processors"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": false, 
                                            "description": "if requested to save the same sensor's value of the latest in a very short time, ignore it (tolerance in seconds)", 
                                            "name": "duplicates_tolerance"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": false, 
                                            "description": "if pinning (retaining) the last value of each sensor on the message bus", 
                                            "name": "pin_last_values"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "gui/webserver": {
                                    "description": "Runs the webserver serving eGeoffrey's web interface"
                                }
                            }, 
                            {
                                "interaction/slack": {
                                    "description": "Connect to a slack channel as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot has to join", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "interaction/telegram_messenger": {
                                    "description": "Connect to a Telegram group as a bot and interact with the user", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The command to use as a prefix for interacting with the bot (e.g. /housebot hi)", 
                                            "name": "command_handler"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/betamax_sms": {
                                    "description": "send out sms notifications (betamax voip service)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "The phone number to be used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "www.frevoipdeal.com", 
                                            "description": "The Betamax hostname of your service", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "username", 
                                            "description": "The username of your betamax account", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": true, 
                                            "placeholder": "password", 
                                            "description": "The password of your betamax account", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use SSL", 
                                            "name": "ssl"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 112341231232, 
                                            "description": "Recipient phone number(s), comma separated", 
                                            "name": "to"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/slack": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot will send notifications to", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/smtp": {
                                    "description": "Send out email notifications", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "The email address used as the from of the message", 
                                            "name": "from"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "smtp.google.com", 
                                            "description": "The SMTP server used to send out the email", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": 25, 
                                            "description": "The port of the SMTP server", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the SMTP server", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the SMTP server", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "checkbox", 
                                            "required": true, 
                                            "description": "Use TLS", 
                                            "name": "tls"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "user@email.com", 
                                            "description": "Recipient email address(es), comma separated", 
                                            "name": "to"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "House Notification", 
                                            "description": "Subject of the email", 
                                            "name": "subject"
                                        }, 
                                        {
                                            "format": "text", 
                                            "required": true, 
                                            "description": "Template to use for the email's body (with placehoders", 
                                            "name": "template"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/mobile": {
                                    "description": "forward notifications to a list of configured devices running the eGeoffrey mobile app", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "Asadjaskld109213102312kljlcasldkd123", 
                                            "description": "List of tokens of the mobile devices to be notified, comma separated (to get the device token, open the eGeoffrey mobile app and tap on 'About')", 
                                            "name": "devices"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/telegram_messenger": {
                                    "description": "Send a notification via Telegram to a user or a group", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The token of the Telegram bot you have created (https://core.telegram.org/bots#3-how-do-i-create-a-bot)", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The chat_id you want to send the message to (https://t.me/gettingidbot)", 
                                            "name": "chat_id"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/chromecast": {
                                    "description": "Play a notification through a Chromecast device", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.53", 
                                            "description": "The hostname/IP address of the Chromecast device", 
                                            "name": "device_ip"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.254", 
                                            "description": "The IP address where this module runs (the device will connect back here to play the audio)", 
                                            "name": "local_ip"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "service/command": {
                                    "description": "Run system commands", 
                                    "service_configuration": {
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "reboot", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "uptime", 
                                                "description": "Command to run", 
                                                "name": "command"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/csv": {
                                    "description": "Retrieve values from a csv file", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "https://www1.ncdc.noaa.gov/pub/data/cdo/samples/NORMAL_DLY_sample_csv.csv", 
                                                "description": "Location or URL of the CSV file", 
                                                "name": "csv_file"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "description": "Column number which contains the value to extract", 
                                                "name": "value_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "If defined, only the lines of the file with this value at this position will be evaluated", 
                                                "name": "filter"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column you want to filter in the csv file", 
                                                "name": "filter_position"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "description": "The column of the date (UTC) in the csv file", 
                                                "name": "date_position"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "The format of the date in strftime format", 
                                                "name": "date_format"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "description": "An optional prefix of the value (that will be striped out) used as additional filter", 
                                                "name": "prefix"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/earthquake": {
                                    "description": "Retrieve earthquake information", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "earthquake.usgs.gov", 
                                                "description": "The domain hosting the FDSN Web Services", 
                                                "name": "domain"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "minmag=7", 
                                                "description": "A query in the format key1=value1&key=value2", 
                                                "name": "query"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/fcc_weather": {
                                    "description": "Retrieve weather information from Free Code Camp Weather API", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/icloud": {
                                    "description": "Retrieve position of a device from Apple icloud service", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "username@email.com", 
                                                "description": "The username of the icloud account", 
                                                "name": "username"
                                            }, 
                                            {
                                                "format": "password", 
                                                "required": true, 
                                                "description": "The password of the icloud account", 
                                                "name": "password"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "my_iPhone", 
                                                "description": "The name of the device to monitor", 
                                                "name": "device_name"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }
                                    ], 
                                    "description": "Interact with sensors through a mqtt broker", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/in", 
                                                "description": "The topic to subscribe", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "temperature", 
                                                "description": "The key of the JSON payload whose measure has to be extracted", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "action=rotate_right", 
                                                "description": "Filter in only a subset of data based on conditions provided in the format key1=value1&key2=value2 (for JSON input only)", 
                                                "name": "filter"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "/sensors/out", 
                                                "description": "The topic to publish to", 
                                                "name": "topic"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "state", 
                                                "description": "Send a JSON payload with the value set into the following attribute", 
                                                "name": "key"
                                            }, 
                                            {
                                                "format": "string", 
                                                "required": false, 
                                                "placeholder": "{\"warning\": {\"duration\": 10, \"mode\": \"%value%\", \"strobe\": true}}", 
                                                "description": "Send a custom payload with the placeholder %value% replaced by the actual value", 
                                                "name": "template"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/openweathermap": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your OpenWeatherMap API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from OpenWeatherMap", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|pressure|humidity|wind|wind_dir|condition|description|visibility|rain_1h|rain_3h|snow_1h|snow_3h|clouds|uv|forecast_temperature|forecast_pressure|forecast_humidity|forecast_wind|forecast_wind_dir|forecast_condition|forecast_description|forecast_visibility|forecast_rain_3h|forecast_snow_3h|forecast_clouds", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/rss": {
                                    "description": "Parse a RSS feed", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "string", 
                                                "required": true, 
                                                "placeholder": "http://rss.cnn.com/rss/cnn_latest.rss", 
                                                "description": "The url of the RSS feed", 
                                                "name": "url"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/weatherchannel": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "Your WeatherChannel API key", 
                                            "name": "api_key"
                                        }
                                    ], 
                                    "description": "Retrieve weather information from weatherchannel", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "alerts", 
                                                "required": true, 
                                                "description": "What to request", 
                                                "name": "request"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 12.33, 
                                                "description": "The latitude of the location", 
                                                "name": "latitude"
                                            }, 
                                            {
                                                "format": "float", 
                                                "required": true, 
                                                "placeholder": 70.11, 
                                                "description": "The longitude of the location", 
                                                "name": "longitude"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "environment": [
                                "EGEOFFREY_LOGGING_LOCAL=0"
                            ], 
                            "ports": [
                                "8081:8081"
                            ], 
                            "volumes": [
                                "./data/egeoffrey/logs:/egeoffrey/logs", 
                                "./data/egeoffrey/config:/egeoffrey/config"
                            ]
                        }, 
                        "version": 1.2, 
                        "branch": "master", 
                        "icon": "cube", 
                        "revision": 3
                    }
                }
            }
        }, 
        "egeoffrey-gateway": {
            "info": {
                "created_timestamp": 1565192784, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-gateway", 
                "created_string": "07/08/2019 15:46:24", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "master": {
                    "info": {
                        "updated_timestamp": 1595969564, 
                        "updated_string": "28/07/2020 20:52:44", 
                        "updated_days_ago": 613
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-gateway", 
                        "description": "Runs the eGeoffrey Gateway through which all the modules can exchange information", 
                        "package": "egeoffrey-gateway", 
                        "dockerhub": "egeoffrey/egeoffrey-gateway", 
                        "manifest_schema": 2, 
                        "tags": "gateway", 
                        "modules": [], 
                        "container_config": {
                            "ports": [
                                "443:443", 
                                "1883:1883", 
                                "8883:8883"
                            ], 
                            "volumes": [
                                "./data/gateway/data:/mosquitto/data", 
                                "./data/gateway/logs:/mosquitto/logs"
                            ]
                        }, 
                        "version": 1.2, 
                        "branch": "master", 
                        "icon": "project-diagram", 
                        "revision": 2
                    }
                }
            }
        }, 
        "egeoffrey-service-mysensors": {
            "info": {
                "created_timestamp": 1565192789, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-mysensors", 
                "created_string": "07/08/2019 15:46:29", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706797, 
                        "updated_string": "17/09/2019 07:53:17", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-mysensors", 
                        "description": "Interact with a MySensors serial/ethernet/mqtt gateway", 
                        "package": "egeoffrey-service-mysensors", 
                        "dockerhub": "egeoffrey/egeoffrey-service-mysensors", 
                        "manifest_schema": 2, 
                        "tags": "service mysensors mqtt serial", 
                        "modules": [
                            {
                                "service/mysensors_serial": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/mysensors", 
                                            "description": "The serial port the MySensors gateway is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 9600, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors serial gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-out", 
                                            "description": "The topic prefix to subscribe to", 
                                            "name": "subscribe_topic_prefix"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-in", 
                                            "description": "The topic prefix to publish data into", 
                                            "name": "publish_topic_prefix"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors MQTT gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_ethernet": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.230", 
                                            "description": "The IP address or hostname running the MySensors gateway", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5003, 
                                            "description": "The port the gateway is listening to", 
                                            "name": "port"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors ethernet gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ]
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "microchip", 
                        "revision": 14
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628524527, 
                        "updated_string": "09/08/2021 15:55:27", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-mysensors", 
                        "description": "Interact with a MySensors serial/ethernet/mqtt gateway", 
                        "package": "egeoffrey-service-mysensors", 
                        "dockerhub": "egeoffrey/egeoffrey-service-mysensors", 
                        "manifest_schema": 2, 
                        "tags": "service mysensors mqtt serial", 
                        "modules": [
                            {
                                "service/mysensors_serial": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "/dev/mysensors", 
                                            "description": "The serial port the MySensors gateway is attached to", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 9600, 
                                            "description": "The baud rate to use for communicating with the device", 
                                            "name": "baud"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors serial gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_mqtt": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "egeoffrey-gateway", 
                                            "description": "The MQTT hostname to connect to", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 1883, 
                                            "description": "The port of the MQTT broker", 
                                            "name": "port"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": false, 
                                            "placeholder": "username", 
                                            "description": "The username for authenticating against the mqtt broker", 
                                            "name": "username"
                                        }, 
                                        {
                                            "format": "password", 
                                            "required": false, 
                                            "placeholder": "password", 
                                            "description": "The password for authenticating against the mqtt broker", 
                                            "name": "password"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-out", 
                                            "description": "The topic prefix to subscribe to", 
                                            "name": "subscribe_topic_prefix"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "mysensors-in", 
                                            "description": "The topic prefix to publish data into", 
                                            "name": "publish_topic_prefix"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors MQTT gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }, 
                            {
                                "service/mysensors_ethernet": {
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "192.168.0.230", 
                                            "description": "The IP address or hostname running the MySensors gateway", 
                                            "name": "hostname"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 5003, 
                                            "description": "The port the gateway is listening to", 
                                            "name": "port"
                                        }
                                    ], 
                                    "description": "Interact with a MySensors ethernet gateway", 
                                    "service_configuration": {
                                        "push": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ], 
                                        "actuator": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": false, 
                                                "placeholder": 1, 
                                                "description": "Mandatory for sleeping nodes to define how many messages to keep in the queue and send once awake", 
                                                "name": "queue_size"
                                            }
                                        ], 
                                        "pull": [
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 1, 
                                                "description": "The unique identifier of the node", 
                                                "name": "node_id"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 3, 
                                                "description": "Each node can have several sensors attached. This is the child-id that uniquely identifies one attached sensor", 
                                                "name": "child_id"
                                            }, 
                                            {
                                                "format": "PRESENTATION|SET|REQ|INTERNAL|STREAM", 
                                                "required": true, 
                                                "description": "MySensors command to trigger", 
                                                "name": "command"
                                            }, 
                                            {
                                                "format": "S_DOOR|S_MOTION|S_SMOKE|S_BINARY|S_DIMMER|S_COVER|S_TEMP|S_HUM|S_BARO|S_WIND|S_RAIN|S_UV|S_WEIGHT|S_POWER|S_HEATER|S_DISTANCE|S_LIGHT_LEVEL|S_ARDUINO_NODE|S_ARDUINO_REPEATER_NODE|S_LOCK|S_IR|S_WATER|S_AIR_QUALITY|S_CUSTOM|S_DUST|S_SCENE_CONTROLLER|S_RGB_LIGHT|S_RGBW_LIGHT|S_COLOR_SENSOR|S_HVAC|S_MULTIMETER|S_SPRINKLER|S_WATER_LEAK|S_SOUND|S_VIBRATION|S_MOISTURE|S_INFO|S_GAS|S_GPS|S_WATER_QUALITY|V_TEMP|V_HUM|V_STATUS|V_PERCENTAGE|V_PRESSURE|V_FORECAST|V_RAIN|V_RAINRATE|V_WIND|V_GUST|V_DIRECTION|V_UV|V_WEIGHT|V_DISTANCE|V_IMPEDANCE|V_ARMED|V_TRIPPED|V_WATT|V_KWH|V_SCENE_ON|V_SCENE_OFF|V_HVAC_FLOW_STATE|V_HVAC_SPEED|V_LIGHT_LEVEL|V_VAR1|V_VAR2|V_VAR3|V_VAR4|V_VAR5|V_UP|V_DOWN|V_STOP|V_IR_SEND|V_IR_RECEIVE|V_FLOW|V_VOLUME|V_LOCK_STATUS|V_LEVEL|V_VOLTAGE|V_CURRENT|V_RGB|V_RGBW|V_ID|V_UNIT_PREFIX|V_HVAC_SETPOINT_COOL|V_HVAC_SETPOINT_HEAT|V_HVAC_FLOW_MODE|V_TEXT|V_CUSTOM|V_POSITION|V_IR_RECORD|V_PH|V_ORP|V_EC|V_VAR|V_VA|V_POWER_FACTOR|I_BATTERY_LEVEL|I_TIME|I_VERSION|I_ID_REQUEST|I_ID_RESPONSE|I_INCLUSION_MODE|I_CONFIG|I_FIND_PARENT|I_FIND_PARENT_RESPONSE|I_LOG_MESSAGE|I_CHILDREN|I_SKETCH_NAME|I_SKETCH_VERSION|I_REBOOT|I_GATEWAY_READY|I_SIGNING_PRESENTATION|I_NONCE_REQUEST|I_NONCE_RESPONSE|I_HEARTBEAT_REQUEST|I_PRESENTATION|I_DISCOVER_REQUEST|I_DISCOVER_RESPONSE|I_HEARTBEAT_RESPONSE|I_LOCKED|I_PING|I_PONG|I_REGISTRATION_REQUEST|I_REGISTRATION_RESPONSE|I_DEBUG|I_SIGNAL_REPORT_REQUEST|I_SIGNAL_REPORT_REVERSE|I_SIGNAL_REPORT_RESPONSE|I_PRE_SLEEP_NOTIFICATION|I_POST_SLEEP_NOTIFICATION|ST_FIRMWARE_CONFIG_REQUEST|ST_FIRMWARE_CONFIG_RESPONSE|ST_FIRMWARE_REQUEST|ST_FIRMWARE_RESPONSE|ST_SOUND|ST_IMAGE", 
                                                "required": true, 
                                                "description": "MySensors type", 
                                                "name": "type"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "devices": [
                                "/dev/ttyAMA0:/dev/ttyAMA0"
                            ]
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "microchip", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-slack": {
            "info": {
                "created_timestamp": 1565192785, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-slack", 
                "created_string": "07/08/2019 15:46:25", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706788, 
                        "updated_string": "17/09/2019 07:53:08", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-slack", 
                        "description": "Send a notification through slack", 
                        "package": "egeoffrey-notification-slack", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-slack", 
                        "manifest_schema": 2, 
                        "tags": "notification slack", 
                        "modules": [
                            {
                                "notification/slack": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot will send notifications to", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "hashtag", 
                        "revision": 9
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628492016, 
                        "updated_string": "09/08/2021 06:53:36", 
                        "updated_days_ago": 237
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-slack", 
                        "description": "Send a notification through slack", 
                        "package": "egeoffrey-notification-slack", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-slack", 
                        "manifest_schema": 2, 
                        "tags": "notification slack", 
                        "modules": [
                            {
                                "notification/slack": {
                                    "description": "Make a phone call through an attached serial device (just a few rings)", 
                                    "module_configuration": [
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "description": "The Slack legacy token the chatbot will use to connect to Slack", 
                                            "name": "bot_token"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "housebot", 
                                            "description": "The name of the bot as it will show up on Slack", 
                                            "name": "bot_name"
                                        }, 
                                        {
                                            "format": "string", 
                                            "required": true, 
                                            "placeholder": "channel_name", 
                                            "description": "The name of the channel the chatbot will send notifications to", 
                                            "name": "channel"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "hashtag", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-service-dht": {
            "info": {
                "created_timestamp": 1565192787, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-service-dht", 
                "created_string": "07/08/2019 15:46:27", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706792, 
                        "updated_string": "17/09/2019 07:53:12", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-dht", 
                        "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                        "package": "egeoffrey-service-dht", 
                        "dockerhub": "egeoffrey/egeoffrey-service-dht", 
                        "manifest_schema": 2, 
                        "tags": "service dht weather temperature raspberrypi", 
                        "modules": [
                            {
                                "service/dht": {
                                    "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|humidity", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "measure"
                                            }, 
                                            {
                                                "format": "dht11|dht22", 
                                                "required": true, 
                                                "description": "DHT Sensor Type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin the sensor is attached to", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "thermometer-three-quarters", 
                        "revision": 10
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1628523425, 
                        "updated_string": "09/08/2021 15:37:05", 
                        "updated_days_ago": 236
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-service-dht", 
                        "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                        "package": "egeoffrey-service-dht", 
                        "dockerhub": "egeoffrey/egeoffrey-service-dht", 
                        "manifest_schema": 2, 
                        "tags": "service dht weather temperature raspberrypi", 
                        "modules": [
                            {
                                "service/dht": {
                                    "description": "Retrieve temperature/humidity from a DHT11/DHT22 sensor", 
                                    "service_configuration": {
                                        "pull": [
                                            {
                                                "format": "temperature|humidity", 
                                                "required": true, 
                                                "description": "What to measure", 
                                                "name": "measure"
                                            }, 
                                            {
                                                "format": "dht11|dht22", 
                                                "required": true, 
                                                "description": "DHT Sensor Type", 
                                                "name": "type"
                                            }, 
                                            {
                                                "format": "int", 
                                                "required": true, 
                                                "placeholder": 2, 
                                                "description": "The pin the sensor is attached to", 
                                                "name": "pin"
                                            }
                                        ]
                                    }
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.1, 
                        "branch": "master", 
                        "icon": "thermometer-three-quarters", 
                        "revision": 1
                    }
                }
            }
        }, 
        "egeoffrey-notification-buzzer": {
            "info": {
                "created_timestamp": 1565192785, 
                "created_days_ago": 969, 
                "repository": "egeoffrey/egeoffrey-notification-buzzer", 
                "created_string": "07/08/2019 15:46:25", 
                "author": "egeoffrey"
            }, 
            "branches": {
                "development": {
                    "info": {
                        "updated_timestamp": 1568706788, 
                        "updated_string": "17/09/2019 07:53:08", 
                        "updated_days_ago": 929
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-buzzer", 
                        "description": "play a sound through a buzzer connected to a pin", 
                        "package": "egeoffrey-notification-buzzer", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-buzzer", 
                        "manifest_schema": 2, 
                        "tags": "notification buzzer gpio raspberrypi orangepi", 
                        "modules": [
                            {
                                "notification/buzzer_raspi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_orangepi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "development", 
                        "icon": "bell", 
                        "revision": 7
                    }
                }, 
                "master": {
                    "info": {
                        "updated_timestamp": 1595574717, 
                        "updated_string": "24/07/2020 07:11:57", 
                        "updated_days_ago": 618
                    }, 
                    "manifest": {
                        "github": "egeoffrey/egeoffrey-notification-buzzer", 
                        "description": "play a sound through a buzzer connected to a pin", 
                        "package": "egeoffrey-notification-buzzer", 
                        "dockerhub": "egeoffrey/egeoffrey-notification-buzzer", 
                        "manifest_schema": 2, 
                        "tags": "notification buzzer gpio raspberrypi orangepi", 
                        "modules": [
                            {
                                "notification/buzzer_raspi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }, 
                            {
                                "notification/buzzer_orangepi": {
                                    "description": "play a sound through a buzzer connected to a pin", 
                                    "module_configuration": [
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 20, 
                                            "description": "The pin the buzzer is attached to", 
                                            "name": "pin"
                                        }, 
                                        {
                                            "format": "int", 
                                            "required": true, 
                                            "placeholder": 3, 
                                            "description": "The number of seconds the buzzer should be on when run", 
                                            "name": "duration"
                                        }
                                    ]
                                }
                            }
                        ], 
                        "container_config": {
                            "privileged": true
                        }, 
                        "version": 1.0, 
                        "branch": "master", 
                        "icon": "bell", 
                        "revision": 9
                    }
                }
            }
        }
    }, 
    "last_update_string": "03/04/2022 08:25:11", 
    "schema_version": 1
}